{
  "author": {
    "name": "Markus Pielmeier",
    "email": "markus.pielmeier@gmail.com"
  },
  "name": "osm-read",
  "description": "an openstreetmap XML and PBF data parser",
  "tags": [
    "osm",
    "openstreetmap"
  ],
  "version": "0.3.1",
  "repository": {
    "type": "git",
    "url": "https://github.com/marook/osm-read.git"
  },
  "bugs": {
    "url": "https://github.com/marook/osm-read/issues"
  },
  "main": "lib/main.js",
  "scripts": {
    "test": "mocha test/*.js"
  },
  "engines": [
    "node >= 0.10.0"
  ],
  "dependencies": {
    "node-xml": "1.0.2",
    "protobufjs": ">= 0.12.0"
  },
  "devDependencies": {
    "mocha": "",
    "should": ""
  },
  "licenses": [
    {
      "type": "GPLv3",
      "url": "http://www.gnu.org/licenses/gpl-3.0.html"
    }
  ],
  "contributors": [
    {
      "name": "Markus Pielmeier",
      "email": "markus.pielmeier@gmail.com"
    }
  ],
  "readme": "osm-read - an openstreetmap XML and PBF parser for node.js\n\n1) Introduction\n2) Usage Examples\n2.1) Simple Usage Example\n2.2) Parse OSM XML from URL Example\n2.3) PBF random access parser\n3) TODOs\n4) License\n5) Contact\n\n------------------------------------------------------------------------\nIntroduction\n\nosm-read parses openstreetmap XML and PBF files as described in\nhttp://wiki.openstreetmap.org/wiki/OSM_XML and\nhttp://wiki.openstreetmap.org/wiki/PBF_Format\n\n\n------------------------------------------------------------------------\nSimple Usage Example\n\nThe following code is used to parse openstreetmap XML or PBF files in a\nSAX parser like callback way.\n\nosmread.parse({\n    filePath: 'path/to/osm.xml',\n    endDocument: function(){\n        console.log('document end');\n    },\n    bounds: function(bounds){\n        console.log('bounds: ' + JSON.stringify(bounds));\n    },\n    node: function(node){\n        console.log('node: ' + JSON.stringify(node));\n    },\n    way: function(way){\n        console.log('way: ' + JSON.stringify(way));\n    },\n    error: function(msg){\n        console.log('error: ' + msg);\n    }\n});\n\n\n------------------------------------------------------------------------\nParse OSM XML from URL Example\n\nCurrently you can only parse OSM data in XML from URLs. Here's an example:\n\nosmread.parse({\n    url: 'http://overpass-api.de/api/interpreter?data=node(51.93315273540566%2C7.567176818847656%2C52.000418429293326%2C7.687854766845703)%5Bhighway%3Dtraffic_signals%5D%3Bout%3B',\n    format: 'xml',\n    endDocument: function(){\n        console.log('document end');\n    },\n    bounds: function(bounds){\n        console.log('bounds: ' + JSON.stringify(bounds));\n    },\n    node: function(node){\n        console.log('node: ' + JSON.stringify(node));\n    },\n    way: function(way){\n        console.log('way: ' + JSON.stringify(way));\n    },\n    error: function(msg){\n        console.log('error: ' + msg);\n    }\n});\n\n\n------------------------------------------------------------------------\nPBF random access parser\n\nThe following code allows to create a random access openstreetmap PBF\nfile parser:\n\nosmread.createPbfParser({\n    filePath: 'path/to/osm.pbf',\n    callback: function(err, parser){\n        var headers;\n\n        if(err){\n            // TODO handle error\n        }\n\n        headers = parser.findFileBlocksByBlobType('OSMHeader');\n\n        parser.readBlock(headers[0], function(err, block){\n            console.log('header block');\n            console.log(block);\n\n            parser.close(function(err){\n                if(err){\n                    // TODO handle error\n                }\n            });\n        });\n    });\n});\n\nDon't forget to close the parse after usage!\n\n\n------------------------------------------------------------------------\nTODOs\n\n* parse timestamps\n\n\n------------------------------------------------------------------------\nLicense\n\nSee file COPYING for details.\n\n\n------------------------------------------------------------------------\nContact\n\n* author: Markus Pielmeier <markus.pielmeier@gmail.com>\n",
  "readmeFilename": "README",
  "_id": "osm-read@0.3.1",
  "dist": {
    "shasum": "1b5f6029c3b99887f76c562314cf56dd8b521785"
  },
  "_from": "osm-read@",
  "_resolved": "https://registry.npmjs.org/osm-read/-/osm-read-0.3.1.tgz"
}
