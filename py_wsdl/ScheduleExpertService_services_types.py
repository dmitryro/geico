################################################## 
# ScheduleExpertService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://soap116.signetcs.com
##############################

class ns0:
    targetNamespace = "http://soap116.signetcs.com"

    class scheduleExpertForTestimony_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "scheduleExpertForTestimony")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.scheduleExpertForTestimony_Def.schema
            TClist = [GTD("http://soap116.signetcs.com","ScheduleExpertForTestimonyRequest",lazy=False)(pname="scheduleExpertForTestimonyRequest", aname="_scheduleExpertForTestimonyRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._scheduleExpertForTestimonyRequest = None
                    return
            Holder.__name__ = "scheduleExpertForTestimony_Holder"
            self.pyclass = Holder

    class ScheduleExpertForTestimonyRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "ScheduleExpertForTestimonyRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ScheduleExpertForTestimonyRequest_Def.schema
            TClist = [GTD("http://soap116.signetcs.com","RequestContext",lazy=False)(pname=(ns,"requestContext"), aname="_requestContext", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap116.signetcs.com","ScheduleExpertForTestimonyRequestDto",lazy=False)(pname=(ns,"scheduleExpertForTestimonyRequestDto"), aname="_scheduleExpertForTestimonyRequestDto", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestContext = None
                    self._scheduleExpertForTestimonyRequestDto = None
                    return
            Holder.__name__ = "ScheduleExpertForTestimonyRequest_Holder"
            self.pyclass = Holder

    class RequestContext_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "RequestContext")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RequestContext_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"applicationName"), aname="_applicationName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"osName"), aname="_osName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"uniqueRequestID"), aname="_uniqueRequestID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userName"), aname="_userName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"machineName"), aname="_machineName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userRegion"), aname="_userRegion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"echoField"), aname="_echoField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._applicationName = None
                    self._osName = None
                    self._uniqueRequestID = None
                    self._userName = None
                    self._machineName = None
                    self._userRegion = None
                    self._echoField = None
                    return
            Holder.__name__ = "RequestContext_Holder"
            self.pyclass = Holder

    class ScheduleExpertForTestimonyRequestDto_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "ScheduleExpertForTestimonyRequestDto")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ScheduleExpertForTestimonyRequestDto_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"vendorUniqueID"), aname="_vendorUniqueID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trialDate"), aname="_trialDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expertName"), aname="_expertName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expertIDNumber"), aname="_expertIDNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"alternateExpertRequested"), aname="_alternateExpertRequested", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"alternateExpertID"), aname="_alternateExpertID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expertReviewType"), aname="_expertReviewType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"courtType"), aname="_courtType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"venueCounty"), aname="_venueCounty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"injuredParty"), aname="_injuredParty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"legalActionNumber"), aname="_legalActionNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"claimNumber"), aname="_claimNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"invoiceNumber"), aname="_invoiceNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._vendorUniqueID = None
                    self._trialDate = None
                    self._expertName = None
                    self._expertIDNumber = None
                    self._alternateExpertRequested = None
                    self._alternateExpertID = None
                    self._expertReviewType = None
                    self._courtType = None
                    self._venueCounty = None
                    self._injuredParty = None
                    self._legalActionNumber = None
                    self._claimNumber = None
                    self._invoiceNumber = None
                    return
            Holder.__name__ = "ScheduleExpertForTestimonyRequestDto_Holder"
            self.pyclass = Holder

    class scheduleExpertForTestimonyResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "scheduleExpertForTestimonyResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.scheduleExpertForTestimonyResponse_Def.schema
            TClist = [GTD("http://soap116.signetcs.com","ScheduleExpertForTestimonyResponse",lazy=False)(pname="scheduleExpertForTestimonyResponse", aname="_scheduleExpertForTestimonyResponse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._scheduleExpertForTestimonyResponse = None
                    return
            Holder.__name__ = "scheduleExpertForTestimonyResponse_Holder"
            self.pyclass = Holder

    class ScheduleExpertForTestimonyResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "ScheduleExpertForTestimonyResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ScheduleExpertForTestimonyResponse_Def.schema
            TClist = [GTD("http://soap116.signetcs.com","RequestContext",lazy=False)(pname=(ns,"requestContext"), aname="_requestContext", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap116.signetcs.com","ServiceStatus",lazy=False)(pname=(ns,"serviceStatus"), aname="_serviceStatus", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap116.signetcs.com","ScheduleExpertForTestimonyResponseDto",lazy=False)(pname=(ns,"scheduleExpertForTestimonyResponseDto"), aname="_scheduleExpertForTestimonyResponseDto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestContext = None
                    self._serviceStatus = []
                    self._scheduleExpertForTestimonyResponseDto = None
                    return
            Holder.__name__ = "ScheduleExpertForTestimonyResponse_Holder"
            self.pyclass = Holder

    class ServiceStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "ServiceStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ServiceStatus_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"statusCode"), aname="_statusCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"statusMessage"), aname="_statusMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._statusCode = None
                    self._statusMessage = None
                    return
            Holder.__name__ = "ServiceStatus_Holder"
            self.pyclass = Holder

    class ScheduleExpertForTestimonyResponseDto_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "ScheduleExpertForTestimonyResponseDto")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ScheduleExpertForTestimonyResponseDto_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ScheduleExpertForTestimonyResponseDto_Holder"
            self.pyclass = Holder

    class cancelExpertForTestimony_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "cancelExpertForTestimony")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cancelExpertForTestimony_Def.schema
            TClist = [GTD("http://soap116.signetcs.com","CancelExpertForTestimonyRequest",lazy=False)(pname="cancelExpertForTestimonyRequest", aname="_cancelExpertForTestimonyRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cancelExpertForTestimonyRequest = None
                    return
            Holder.__name__ = "cancelExpertForTestimony_Holder"
            self.pyclass = Holder

    class CancelExpertForTestimonyRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "CancelExpertForTestimonyRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CancelExpertForTestimonyRequest_Def.schema
            TClist = [GTD("http://soap116.signetcs.com","RequestContext",lazy=False)(pname=(ns,"requestContext"), aname="_requestContext", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap116.signetcs.com","CancelExpertForTestimonyRequestDto",lazy=False)(pname=(ns,"cancelExpertForTestimonyRequestDto"), aname="_cancelExpertForTestimonyRequestDto", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestContext = None
                    self._cancelExpertForTestimonyRequestDto = None
                    return
            Holder.__name__ = "CancelExpertForTestimonyRequest_Holder"
            self.pyclass = Holder

    class CancelExpertForTestimonyRequestDto_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "CancelExpertForTestimonyRequestDto")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CancelExpertForTestimonyRequestDto_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"vendorUniqueID"), aname="_vendorUniqueID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cancellation"), aname="_cancellation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cancellationReason"), aname="_cancellationReason", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"invoiceNumber"), aname="_invoiceNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._vendorUniqueID = None
                    self._cancellation = None
                    self._cancellationReason = None
                    self._invoiceNumber = None
                    return
            Holder.__name__ = "CancelExpertForTestimonyRequestDto_Holder"
            self.pyclass = Holder

    class cancelExpertForTestimonyResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "cancelExpertForTestimonyResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cancelExpertForTestimonyResponse_Def.schema
            TClist = [GTD("http://soap116.signetcs.com","CancelExpertForTestimonyResponse",lazy=False)(pname="cancelExpertForTestimonyResponse", aname="_cancelExpertForTestimonyResponse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cancelExpertForTestimonyResponse = None
                    return
            Holder.__name__ = "cancelExpertForTestimonyResponse_Holder"
            self.pyclass = Holder

    class CancelExpertForTestimonyResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "CancelExpertForTestimonyResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CancelExpertForTestimonyResponse_Def.schema
            TClist = [GTD("http://soap116.signetcs.com","RequestContext",lazy=False)(pname=(ns,"requestContext"), aname="_requestContext", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap116.signetcs.com","ServiceStatus",lazy=False)(pname=(ns,"serviceStatus"), aname="_serviceStatus", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap116.signetcs.com","CancelExpertForTestimonyResponseDto",lazy=False)(pname=(ns,"cancelExpertForTestimonyResponseDto"), aname="_cancelExpertForTestimonyResponseDto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestContext = None
                    self._serviceStatus = []
                    self._cancelExpertForTestimonyResponseDto = None
                    return
            Holder.__name__ = "CancelExpertForTestimonyResponse_Holder"
            self.pyclass = Holder

    class CancelExpertForTestimonyResponseDto_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap116.signetcs.com"
        type = (schema, "CancelExpertForTestimonyResponseDto")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CancelExpertForTestimonyResponseDto_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "CancelExpertForTestimonyResponseDto_Holder"
            self.pyclass = Holder

    class cancelExpertForTestimony_Dec(ElementDeclaration):
        literal = "cancelExpertForTestimony"
        schema = "http://soap116.signetcs.com"
        def __init__(self, **kw):
            kw["pname"] = ("http://soap116.signetcs.com","cancelExpertForTestimony")
            kw["aname"] = "_cancelExpertForTestimony"
            if ns0.cancelExpertForTestimony_Def not in ns0.cancelExpertForTestimony_Dec.__bases__:
                bases = list(ns0.cancelExpertForTestimony_Dec.__bases__)
                bases.insert(0, ns0.cancelExpertForTestimony_Def)
                ns0.cancelExpertForTestimony_Dec.__bases__ = tuple(bases)

            ns0.cancelExpertForTestimony_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "cancelExpertForTestimony_Dec_Holder"

    class cancelExpertForTestimonyResponse_Dec(ElementDeclaration):
        literal = "cancelExpertForTestimonyResponse"
        schema = "http://soap116.signetcs.com"
        def __init__(self, **kw):
            kw["pname"] = ("http://soap116.signetcs.com","cancelExpertForTestimonyResponse")
            kw["aname"] = "_cancelExpertForTestimonyResponse"
            if ns0.cancelExpertForTestimonyResponse_Def not in ns0.cancelExpertForTestimonyResponse_Dec.__bases__:
                bases = list(ns0.cancelExpertForTestimonyResponse_Dec.__bases__)
                bases.insert(0, ns0.cancelExpertForTestimonyResponse_Def)
                ns0.cancelExpertForTestimonyResponse_Dec.__bases__ = tuple(bases)

            ns0.cancelExpertForTestimonyResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "cancelExpertForTestimonyResponse_Dec_Holder"

    class scheduleExpertForTestimony_Dec(ElementDeclaration):
        literal = "scheduleExpertForTestimony"
        schema = "http://soap116.signetcs.com"
        def __init__(self, **kw):
            kw["pname"] = ("http://soap116.signetcs.com","scheduleExpertForTestimony")
            kw["aname"] = "_scheduleExpertForTestimony"
            if ns0.scheduleExpertForTestimony_Def not in ns0.scheduleExpertForTestimony_Dec.__bases__:
                bases = list(ns0.scheduleExpertForTestimony_Dec.__bases__)
                bases.insert(0, ns0.scheduleExpertForTestimony_Def)
                ns0.scheduleExpertForTestimony_Dec.__bases__ = tuple(bases)

            ns0.scheduleExpertForTestimony_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "scheduleExpertForTestimony_Dec_Holder"

    class scheduleExpertForTestimonyResponse_Dec(ElementDeclaration):
        literal = "scheduleExpertForTestimonyResponse"
        schema = "http://soap116.signetcs.com"
        def __init__(self, **kw):
            kw["pname"] = ("http://soap116.signetcs.com","scheduleExpertForTestimonyResponse")
            kw["aname"] = "_scheduleExpertForTestimonyResponse"
            if ns0.scheduleExpertForTestimonyResponse_Def not in ns0.scheduleExpertForTestimonyResponse_Dec.__bases__:
                bases = list(ns0.scheduleExpertForTestimonyResponse_Dec.__bases__)
                bases.insert(0, ns0.scheduleExpertForTestimonyResponse_Def)
                ns0.scheduleExpertForTestimonyResponse_Dec.__bases__ = tuple(bases)

            ns0.scheduleExpertForTestimonyResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "scheduleExpertForTestimonyResponse_Dec_Holder"

# end class ns0 (tns: http://soap116.signetcs.com)
